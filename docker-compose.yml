version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: fastapi_shop_postgres
    environment:
      POSTGRES_DB: fastapi_shop
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fastapi_shop_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fastapi_shop"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: fastapi_shop_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fastapi_shop_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI 应用
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_shop_app
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/fastapi_shop
      - DATABASE_URL_SYNC=postgresql://user:password@postgres:5432/fastapi_shop
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
      - DEBUG=True
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fastapi_shop_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_shop_celery_worker
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/fastapi_shop
      - DATABASE_URL_SYNC=postgresql://user:password@postgres:5432/fastapi_shop
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fastapi_shop_network
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Beat (定时任务)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_shop_celery_beat
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/fastapi_shop
      - DATABASE_URL_SYNC=postgresql://user:password@postgres:5432/fastapi_shop
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    volumes:
      - ./app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fastapi_shop_network
    command: celery -A app.core.celery beat --loglevel=info

  # Flower (Celery 监控)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_shop_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - fastapi_shop_network
    command: celery -A app.core.celery flower --port=5555

  # MinIO (对象存储)
  minio:
    image: minio/minio:latest
    container_name: fastapi_shop_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - fastapi_shop_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Elasticsearch (搜索引擎)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: fastapi_shop_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fastapi_shop_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (Elasticsearch 可视化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: fastapi_shop_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - fastapi_shop_network

  # Prometheus (监控)
  prometheus:
    image: prom/prometheus:latest
    container_name: fastapi_shop_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fastapi_shop_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (监控可视化)
  grafana:
    image: grafana/grafana:latest
    container_name: fastapi_shop_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - fastapi_shop_network

  # Nginx (反向代理)
  nginx:
    image: nginx:alpine
    container_name: fastapi_shop_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - fastapi_shop_network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=development
    container_name: fastapi_shop_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - fastapi_shop_network
    depends_on:
      - app

volumes:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  frontend_node_modules:

networks:
  fastapi_shop_network:
    driver: bridge

